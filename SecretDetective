import java.util.*;
public class SecretDetective {

  public String recoverSecret(char[][] triplets) {
    Letter[] a = new Letter[26];
    List<Letter> letters = new ArrayList<Letter>();
    for(int i=0; i<26; i++)                   //instantiate alphabet
      a[i] = new Letter(i);
    
    int count = 0;
    for(int i=0; i<triplets.length; i++) {            //fill the alphabet
      int[] row = {triplets[i][0] - 97, triplets[i][1] - 97, triplets[i][2] - 97};
      
      for(int j=0; j<3; j++){
        if(a[row[j]].numP==0 && a[row[j]].children.size()==0){
          count++; letters.add(a[row[j]]);
        }
      }
      
      a[row[0]].children.add(a[row[1]]); a[row[1]].children.add(a[row[2]]);       //adding appropriate connections
      a[row[2]].numP++; a[row[1]].numP++; 
    }

    char[] word = new char[count];
    for(int i=0; i<count; i++) {
      int j=0;
      while(letters.get(j).numP !=0)
        j++;
      
      Letter x = letters.get(j);
      word[i] = x.letter;
      for(int n=0; n<x.children.size(); n++)
        x.children.get(n).numP--;
      letters.remove(j);
    }
    
    String output = "";                     //returning output
    for(char c : word)
      output += c;
    return output;
  }
  
  public static class Letter{
    List<Letter> children;
    char letter;
    int val;
    int numP;
    
    public Letter(int i) {
      children = new ArrayList<Letter>();
      letter = (char) (i + 97);
      numP = 0;
    }
  }
}
